/* automatically generated by rust-bindgen 0.57.0 */

pub type size_t = libc::c_uint;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_longlong;
pub type __uint64_t = libc::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gbm_device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gbm_bo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gbm_surface {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gbm_bo_handle {
    pub ptr: *mut libc::c_void,
    pub s32: i32,
    pub u32_: u32,
    pub s64: i64,
    pub u64_: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_gbm_bo_handle() {
    assert_eq!(
        ::std::mem::size_of::<gbm_bo_handle>(),
        8usize,
        concat!("Size of: ", stringify!(gbm_bo_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<gbm_bo_handle>(),
        8usize,
        concat!("Alignment of ", stringify!(gbm_bo_handle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_bo_handle>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_bo_handle),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_bo_handle>())).s32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_bo_handle),
            "::",
            stringify!(s32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_bo_handle>())).u32_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_bo_handle),
            "::",
            stringify!(u32_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_bo_handle>())).s64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_bo_handle),
            "::",
            stringify!(s64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_bo_handle>())).u64_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_bo_handle),
            "::",
            stringify!(u64_)
        )
    );
}
pub const gbm_bo_format_GBM_BO_FORMAT_XRGB8888: gbm_bo_format = 0;
pub const gbm_bo_format_GBM_BO_FORMAT_ARGB8888: gbm_bo_format = 1;
pub type gbm_bo_format = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gbm_format_name_desc {
    pub name: [libc::c_char; 5usize],
}
#[test]
fn bindgen_test_layout_gbm_format_name_desc() {
    assert_eq!(
        ::std::mem::size_of::<gbm_format_name_desc>(),
        5usize,
        concat!("Size of: ", stringify!(gbm_format_name_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<gbm_format_name_desc>(),
        1usize,
        concat!("Alignment of ", stringify!(gbm_format_name_desc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_format_name_desc>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_format_name_desc),
            "::",
            stringify!(name)
        )
    );
}
pub const gbm_bo_flags_GBM_BO_USE_SCANOUT: gbm_bo_flags = 1;
pub const gbm_bo_flags_GBM_BO_USE_CURSOR: gbm_bo_flags = 2;
pub const gbm_bo_flags_GBM_BO_USE_CURSOR_64X64: gbm_bo_flags = 2;
pub const gbm_bo_flags_GBM_BO_USE_RENDERING: gbm_bo_flags = 4;
pub const gbm_bo_flags_GBM_BO_USE_WRITE: gbm_bo_flags = 8;
pub const gbm_bo_flags_GBM_BO_USE_LINEAR: gbm_bo_flags = 16;
pub const gbm_bo_flags_GBM_BO_USE_PROTECTED: gbm_bo_flags = 32;
pub type gbm_bo_flags = libc::c_uint;
extern "C" {
    pub fn gbm_device_get_fd(gbm: *mut gbm_device) -> libc::c_int;
}
extern "C" {
    pub fn gbm_device_get_backend_name(gbm: *mut gbm_device) -> *const libc::c_char;
}
extern "C" {
    pub fn gbm_device_is_format_supported(gbm: *mut gbm_device, format: u32, usage: u32) -> libc::c_int;
}
extern "C" {
    pub fn gbm_device_get_format_modifier_plane_count(
        gbm: *mut gbm_device,
        format: u32,
        modifier: u64,
    ) -> libc::c_int;
}
extern "C" {
    pub fn gbm_device_destroy(gbm: *mut gbm_device);
}
extern "C" {
    pub fn gbm_create_device(fd: libc::c_int) -> *mut gbm_device;
}
extern "C" {
    pub fn gbm_bo_create(
        gbm: *mut gbm_device,
        width: u32,
        height: u32,
        format: u32,
        flags: u32,
    ) -> *mut gbm_bo;
}
extern "C" {
    pub fn gbm_bo_create_with_modifiers(
        gbm: *mut gbm_device,
        width: u32,
        height: u32,
        format: u32,
        modifiers: *const u64,
        count: libc::c_uint,
    ) -> *mut gbm_bo;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gbm_import_fd_data {
    pub fd: libc::c_int,
    pub width: u32,
    pub height: u32,
    pub stride: u32,
    pub format: u32,
}
#[test]
fn bindgen_test_layout_gbm_import_fd_data() {
    assert_eq!(
        ::std::mem::size_of::<gbm_import_fd_data>(),
        20usize,
        concat!("Size of: ", stringify!(gbm_import_fd_data))
    );
    assert_eq!(
        ::std::mem::align_of::<gbm_import_fd_data>(),
        4usize,
        concat!("Alignment of ", stringify!(gbm_import_fd_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_import_fd_data>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_import_fd_data),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_import_fd_data>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_import_fd_data),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_import_fd_data>())).height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_import_fd_data),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_import_fd_data>())).stride as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_import_fd_data),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_import_fd_data>())).format as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_import_fd_data),
            "::",
            stringify!(format)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gbm_import_fd_modifier_data {
    pub width: u32,
    pub height: u32,
    pub format: u32,
    pub num_fds: u32,
    pub fds: [libc::c_int; 4usize],
    pub strides: [libc::c_int; 4usize],
    pub offsets: [libc::c_int; 4usize],
    pub modifier: u64,
}
#[test]
fn bindgen_test_layout_gbm_import_fd_modifier_data() {
    assert_eq!(
        ::std::mem::size_of::<gbm_import_fd_modifier_data>(),
        72usize,
        concat!("Size of: ", stringify!(gbm_import_fd_modifier_data))
    );
    assert_eq!(
        ::std::mem::align_of::<gbm_import_fd_modifier_data>(),
        8usize,
        concat!("Alignment of ", stringify!(gbm_import_fd_modifier_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_import_fd_modifier_data>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_import_fd_modifier_data),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_import_fd_modifier_data>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_import_fd_modifier_data),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_import_fd_modifier_data>())).format as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_import_fd_modifier_data),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_import_fd_modifier_data>())).num_fds as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_import_fd_modifier_data),
            "::",
            stringify!(num_fds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_import_fd_modifier_data>())).fds as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_import_fd_modifier_data),
            "::",
            stringify!(fds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_import_fd_modifier_data>())).strides as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_import_fd_modifier_data),
            "::",
            stringify!(strides)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_import_fd_modifier_data>())).offsets as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_import_fd_modifier_data),
            "::",
            stringify!(offsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbm_import_fd_modifier_data>())).modifier as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(gbm_import_fd_modifier_data),
            "::",
            stringify!(modifier)
        )
    );
}
extern "C" {
    pub fn gbm_bo_import(
        gbm: *mut gbm_device,
        type_: u32,
        buffer: *mut libc::c_void,
        usage: u32,
    ) -> *mut gbm_bo;
}
pub const gbm_bo_transfer_flags_GBM_BO_TRANSFER_READ: gbm_bo_transfer_flags = 1;
pub const gbm_bo_transfer_flags_GBM_BO_TRANSFER_WRITE: gbm_bo_transfer_flags = 2;
pub const gbm_bo_transfer_flags_GBM_BO_TRANSFER_READ_WRITE: gbm_bo_transfer_flags = 3;
pub type gbm_bo_transfer_flags = libc::c_uint;
extern "C" {
    pub fn gbm_bo_map(
        bo: *mut gbm_bo,
        x: u32,
        y: u32,
        width: u32,
        height: u32,
        flags: u32,
        stride: *mut u32,
        map_data: *mut *mut libc::c_void,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn gbm_bo_unmap(bo: *mut gbm_bo, map_data: *mut libc::c_void);
}
extern "C" {
    pub fn gbm_bo_get_width(bo: *mut gbm_bo) -> u32;
}
extern "C" {
    pub fn gbm_bo_get_height(bo: *mut gbm_bo) -> u32;
}
extern "C" {
    pub fn gbm_bo_get_stride(bo: *mut gbm_bo) -> u32;
}
extern "C" {
    pub fn gbm_bo_get_stride_for_plane(bo: *mut gbm_bo, plane: libc::c_int) -> u32;
}
extern "C" {
    pub fn gbm_bo_get_format(bo: *mut gbm_bo) -> u32;
}
extern "C" {
    pub fn gbm_bo_get_bpp(bo: *mut gbm_bo) -> u32;
}
extern "C" {
    pub fn gbm_bo_get_offset(bo: *mut gbm_bo, plane: libc::c_int) -> u32;
}
extern "C" {
    pub fn gbm_bo_get_device(bo: *mut gbm_bo) -> *mut gbm_device;
}
extern "C" {
    pub fn gbm_bo_get_handle(bo: *mut gbm_bo) -> gbm_bo_handle;
}
extern "C" {
    pub fn gbm_bo_get_fd(bo: *mut gbm_bo) -> libc::c_int;
}
extern "C" {
    pub fn gbm_bo_get_modifier(bo: *mut gbm_bo) -> u64;
}
extern "C" {
    pub fn gbm_bo_get_plane_count(bo: *mut gbm_bo) -> libc::c_int;
}
extern "C" {
    pub fn gbm_bo_get_handle_for_plane(bo: *mut gbm_bo, plane: libc::c_int) -> gbm_bo_handle;
}
extern "C" {
    pub fn gbm_bo_write(bo: *mut gbm_bo, buf: *const libc::c_void, count: size_t) -> libc::c_int;
}
extern "C" {
    pub fn gbm_bo_set_user_data(
        bo: *mut gbm_bo,
        data: *mut libc::c_void,
        destroy_user_data: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut gbm_bo, arg2: *mut libc::c_void),
        >,
    );
}
extern "C" {
    pub fn gbm_bo_get_user_data(bo: *mut gbm_bo) -> *mut libc::c_void;
}
extern "C" {
    pub fn gbm_bo_destroy(bo: *mut gbm_bo);
}
extern "C" {
    pub fn gbm_surface_create(
        gbm: *mut gbm_device,
        width: u32,
        height: u32,
        format: u32,
        flags: u32,
    ) -> *mut gbm_surface;
}
extern "C" {
    pub fn gbm_surface_create_with_modifiers(
        gbm: *mut gbm_device,
        width: u32,
        height: u32,
        format: u32,
        modifiers: *const u64,
        count: libc::c_uint,
    ) -> *mut gbm_surface;
}
extern "C" {
    pub fn gbm_surface_lock_front_buffer(surface: *mut gbm_surface) -> *mut gbm_bo;
}
extern "C" {
    pub fn gbm_surface_release_buffer(surface: *mut gbm_surface, bo: *mut gbm_bo);
}
extern "C" {
    pub fn gbm_surface_has_free_buffers(surface: *mut gbm_surface) -> libc::c_int;
}
extern "C" {
    pub fn gbm_surface_destroy(surface: *mut gbm_surface);
}
extern "C" {
    pub fn gbm_format_get_name(gbm_format: u32, desc: *mut gbm_format_name_desc) -> *mut libc::c_char;
}
